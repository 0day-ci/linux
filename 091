#! /bin/sh
# FS QA Test No. 091
#
# fsx exercising direct IO -- sub-block sizes and concurrent buffered IO
#
#-----------------------------------------------------------------------
# Copyright (c) 2000-2004 Silicon Graphics, Inc.  All Rights Reserved.
#-----------------------------------------------------------------------
#
# creator
owner=nathans@sgi.com

seq=`basename $0`
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1	# failure is the default!
trap "rm -f $tmp.*; exit \$status" 0 1 2 3 15

# get standard environment, filters and checks
. ./common.rc
. ./common.filter

# real QA test starts here
_supported_fs xfs
_supported_os Linux IRIX

[ $HOSTOS == IRIX ] && _notrun "Not working on IRIX yet"

rm -f $seq.full

run_fsx()
{
	echo fsx $@ | tee -a $seq.full | sed -e "s/ $bsize / BSIZE /g" -e "s/ $psize / PSIZE /g"
	rm -f $TEST_DIR/junk
	$here/ltp/fsx $@ $TEST_DIR/junk >>$seq.full 2>&1
	if [ $? -ne 0 ]; then
		cat $seq.full
		exit 1
	fi
}

psize=`$here/src/feature -s`
bsize=512
kernel=`uname -r  | sed -e 's/\(2\..\).*/\1/'`

# 2.4 Linux kernels support bsize aligned direct I/O only
[ "$HOSTOS" = "Linux" -a "$kernel" = "2.4" ] && bsize=$psize

# 2.6 Linux kernels support sector aligned direct I/O only
if [ "$HOSTOS" = "Linux" -a "$kernel" = "2.6" ]; then
	xfs_info $TEST_DIR | _filter_mkfs 2> $tmp.info > /dev/null
	if [ $? -eq 0 ]; then
		source $tmp.info
		bsize=$sectsz
	fi
fi

# fsx usage:
# 
# -N numops: total # operations to do 
# -l flen: the upper bound on file size 
# -o oplen: the upper bound on operation size (64k default)
# -r readbdy: $psize would make reads page aligned (on i386)
# -t truncbdy: $psize would make truncates page aligned (on i386)
# -w writebdy: $psize would make writes page aligned (on i386)
# 
# -Z: O_DIRECT (use -R, -W, -r and -w too)
# -R: mapped read operations DISabled
# -W: mapped write operations DISabled

#run_fsx -N 10000            -l 500000 -r $psize -t $psize -w $psize -Z -R -W
 run_fsx -N 10000            -l 500000 -r $psize -t $bsize -w $bsize -Z -R -W
 run_fsx -N 10000  -o 8192   -l 500000 -r $psize -t $bsize -w $bsize -Z -R -W
#run_fsx -N 10000  -o 16384  -l 500000 -r $psize -t $psize -w $psize -Z -R -W
 run_fsx -N 10000  -o 32768  -l 500000 -r $psize -t $bsize -w $bsize -Z -R -W
#run_fsx -N 10000  -o 128000 -l 500000 -r $psize -t $psize -w $psize -Z -R -W
 run_fsx -N 10000  -o 8192   -l 500000 -r $psize -t $bsize -w $bsize -Z -R -W
#run_fsx -N 10000  -o 16384  -l 500000 -r $psize -t $psize -w $psize -Z -R -W
 run_fsx -N 10000  -o 32768  -l 500000 -r $psize -t $bsize -w $bsize -Z -R -W
#run_fsx -N 10000  -o 128000 -l 500000 -r $psize -t $psize -w $psize -Z -W
 run_fsx -N 10000  -o 128000 -l 500000 -r $psize -t $bsize -w $bsize -Z -W

# Commented out calls above are less likely to pick up issues, so
# save time by commenting them out (leave 'em for manual testing).

status=0
exit
