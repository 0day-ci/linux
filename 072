#! /bin/sh
# XFS QA Test No. 072
# $Id: 072,v 1.2 2003/07/07 06:02:25 fsgqa Exp $
#
# Check some unwritten extent boundary conditions
#
#-----------------------------------------------------------------------
# Copyright (c) 2000-2003 Silicon Graphics, Inc.  All Rights Reserved.
# 
# This program is free software; you can redistribute it and/or modify it
# under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
# 
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# 
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write the Free Software Foundation, Inc., 59
# Temple Place - Suite 330, Boston MA 02111-1307, USA.
# 
# Contact information: Silicon Graphics, Inc., 1600 Amphitheatre Pkwy,
# Mountain View, CA  94043, or:
# 
# http://www.sgi.com 
# 
# For further information regarding this notice, see: 
# 
# http://oss.sgi.com/projects/GenInfo/SGIGPLNoticeExplan/
#-----------------------------------------------------------------------
#
# creator
owner=nathans@sgi.com

seq=`basename $0`
echo "QA output created by $seq"

_cleanup()
{
	umount $tmp.$seq 2>/dev/null
	rm -f $tmp.*
}

here=`pwd`
tmp=/tmp/$$
status=1	# failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

# get standard environment, filters and checks
. ./common.rc
. ./common.filter

[ "$USE_EXTERNAL" = yes ] && _notrun "Test doesn't cope with external devices"

# real QA test starts here
_require_loop

# use a sparse file to get the large size we want here...
rm -f $TEST_DIR/test.xfs
/sbin/mkfs.xfs -f $MKFS_OPTIONS -dfile,name=$TEST_DIR/test.xfs,size=100g \
    >> $seq.full 2>&1 \
    || _fail "!!! failed to mkfs xfs in a file"
mkdir $tmp.$seq >> $seq.full 2>&1 \
    || _fail "!!! failed to make mount point"
echo Silence is golden

# reserve 1GiB, truncate at 100bytes
xfs_io -f -c 'resvsp 0 1g' -c 'truncate 100' $tmp.$seq/ouch
rm -f $tmp.$seq/ouch

# reserve 1GiB, truncate at 2GiB
xfs_io -f -c 'resvsp 0 1g' -c 'truncate 2g' $tmp.$seq/ouch
rm -f $tmp.$seq/ouch

# reserve 1GiB, truncate at 1GiB
xfs_io -f -c 'resvsp 0 1g' -c 'truncate 1g' $tmp.$seq/ouch
rm -f $tmp.$seq/ouch

# reserve 1GiB, 1GiB hole, reserve 1GiB, truncate at 3GiB
xfs_io -f -c 'resvsp 0 1g' -c 'resvsp 2g 1g' -c 'truncate 3g' $tmp.$seq/ouch
rm -f $tmp.$seq/ouch

# success, all done
status=0
exit
