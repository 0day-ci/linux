#! /bin/sh
# FS QA Test No. 052
#
# Ensure that quota(1) displays blocksizes matching ondisk dquots.
#
# MOUNT_OPTIONS can be set to gquota to test group quota,
# defaults to uquota if MOUNT_OPTIONS is not set.
#
#-----------------------------------------------------------------------
# Copyright (c) 2000-2002 Silicon Graphics, Inc.  All Rights Reserved.
#-----------------------------------------------------------------------
#
# creator
owner=nathans@sgi.com

seq=`basename $0`
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1	# failure is the default!

# get standard environment, filters and checks
. ./common.rc
. ./common.filter
. ./common.quota

_cleanup()
{
	cd /
	umount $SCRATCH_MNT 2>/dev/null
	rm -f $tmp.*
}
trap "_cleanup; exit \$status" 0 1 2 3 15

# real QA test starts here
_supported_fs xfs
_supported_os IRIX Linux

rm -f $seq.full

_require_scratch
_require_quota
_require_nobody

# setup a default run
if [ -z "$MOUNT_OPTIONS" ]; then
        export MOUNT_OPTIONS="-o uquota"
fi

_scratch_mkfs_xfs | _filter_mkfs 2>$tmp.mkfs
cat $tmp.mkfs >>$seq.full
chmod a+w $seq.full     # arbitrary users will write here

# keep the blocksize from mkfs ($dbsize)
. $tmp.mkfs

_qmount

# setup user/group to test
if src/feature -U $SCRATCH_DEV ; then
	type=u; eval `_choose_uid`
elif src/feature -G $SCRATCH_DEV ; then
	type=g; eval `_choose_gid`
else
	_notrun "No quota support at mount time"
fi

# create 100 (fs-blocksize) blocks
_file_as_id $SCRATCH_MNT/foo $id $type $dbsize 220
sync

# Irix uses filesystem name and Linux uses device of filesystem
if [ $HOSTOS = "Linux" ]; then
    QUOTA_FS=$SCRATCH_DEV
else
    QUOTA_FS=$SCRATCH_MNT
fi

# set limit at 1001 (1k) blocks
bsoft=1001
bhard=1001
isoft=10
ihard=10
_setquota -$type $id $bsoft $bhard $isoft $ihard $QUOTA_FS

_filter_quota()
{
    perl -ne '
	if (m[^\s*'$QUOTA_FS'\s+(\d+)\s+(\d+)\s+(\d+)] ||
		($next == 1 && m,^\s+(\d+)\s+(\d+)\s+(\d+),)) {
		print "used_blocks=", $1, "\n";
		print "soft_blocks=", $2, "\n";
		print "hard_blocks=", $3, "\n";
		$next = 0;
	}
	elsif (m[^\s*'$QUOTA_FS']) {		# devfs (long) names
		$next = 1;
	}' | LC_COLLATE=POSIX sort
}

# cross check blks, softblks, hardblks <-> quota, xfs_db
_quota -$type $id | tee -a $seq.full | _filter_quota >$tmp.quota

echo ===quota output >> $seq.full
cat $tmp.quota >> $seq.full
[ ! -s $tmp.quota ] && echo "warning: quota output file is empty"

umount $SCRATCH_MNT

# note - does (insitu) conversion from fs blocks to 1K blocks
xfs_db -rc "dquot -$type $id" -c p $SCRATCH_DEV | tee -a $seq.full | perl -ne '
	if (/^diskdq.bcount = (\d+)$/) {
		 print "used_blocks=", $1 * '$dbsize' / 1024, "\n";
	}
	elsif (/^diskdq.blk_hardlimit = (\d+)$/) {
		 print "hard_blocks=", $1 * '$dbsize' / 1024, "\n";
	}
	elsif (/^diskdq.blk_softlimit = (\d+)$/) {
		print "soft_blocks=", $1 * '$dbsize' / 1024, "\n";
	}' | LC_COLLATE=POSIX sort >$tmp.xfs_db

echo ===xfs_db output >> $seq.full
cat $tmp.xfs_db >> $seq.full
[ ! -s $tmp.xfs_db ] && echo "warning: xfs_db output file is empty"

echo Comparing out of quota and xfs_db
diff $tmp.quota $tmp.xfs_db 
[ $? -eq 0 ] && echo OK.

# success, all done
status=0
exit
