#! /bin/sh
# XFS QA Test No. 013
#
# fsstress
#
#-----------------------------------------------------------------------
# Copyright (c) 2000-2002 Silicon Graphics, Inc.  All Rights Reserved.
# 
# This program is free software; you can redistribute it and/or modify it
# under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
# 
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# 
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write the Free Software Foundation, Inc., 59
# Temple Place - Suite 330, Boston MA 02111-1307, USA.
# 
# Contact information: Silicon Graphics, Inc., 1600 Amphitheatre Pkwy,
# Mountain View, CA  94043, or:
# 
# http://www.sgi.com 
# 
# For further information regarding this notice, see: 
# 
# http://oss.sgi.com/projects/GenInfo/SGIGPLNoticeExplan/
#-----------------------------------------------------------------------
#
# creator
owner=dxm@sgi.com

seq=`basename $0`
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=0	# success is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
    # we might get here with a RO FS
    mount -o remount,rw $TEST_DEV >/dev/null 2>&1
    # now kill!
    rm -rf $TEST_DIR/fsstress.$$.*
}

_filesize()
{
    ls -l $1 | $AWK_PROG '{print "    filesize = " $5}'
}

# get standard environment, filters and checks
. ./common.rc
. ./common.filter

_do_test()
{
    _n="$1"
    _param="$2"
    _count="$3"
    
    out=$TEST_DIR/fsstress.$$.$_n
    rm -rf $out
    if ! mkdir $out
    then
        echo "    failed to mkdir $out"
        status=1
        exit
    fi
    
    echo ""
    echo "-----------------------------------------------"
    echo "fsstress.$_n : $_param"
    echo "-----------------------------------------------"
    # -v >$tmp.out
    # -m limits number of users/groups so check doesn't fail (malloc) later
    if ! $here/ltp/fsstress $_param $FSSTRESS_AVOID -m 8 -n $_count -d $out >/dev/null 2>&1
    then
        echo "    fsstress (count=$_count) returned $? - see $seq.full"
        
        echo "--------------------------------------"       >>$here/$seq.full
        echo "$_n - output from fsstress:"                  >>$here/$seq.full
        echo "--------------------------------------"       >>$here/$seq.full
        echo "<NOT LOGGED>"                                 >>$here/$seq.full
        #cat $tmp.out                                       >>$here/$seq.full
        status=1
    fi

    _check_test_fs
}


# real QA test starts here

rm -f $here/$seq.full
echo "brevity is wit..."

count=2000
procs=20

_check_test_fs

# the default

_do_test 1 "-r" $count

# and the default with multiprocess

_do_test 2 "-p $procs -r" $count

# from Glen's notes

_do_test 3 "-p 4 -z -f rmdir=10 -f link=10 -f creat=10 -f mkdir=10 -f rename=30 -f stat=30 -f unlink=30 -f truncate=20" $count

exit

# Test with error injection:
# 
# (error injection)
# fsstress -n 1000 -d $scratch -p 4 -z -f rmdir=10 -f link=10 -f creat=10 \
#          -f mkdir=10 -f rename=30 -f stat=30 -f unlink=30 -f truncate=20 \
#          -e 1
# 
# Error values 1 - 6 test IFLUSH
#         1 - corrupt buffer being flushed to di_core.di_magic
#         2 - corrupt inode being flushed i_d.di_magic
#         3 - corrupt S_IFREG format check
#         4 - corrupt S_IFDIR format check
#         5 - corrupt i_d.di_nextents
#         6 - corrupt i_d.di_forkoff > sb_inodesize
