#! /bin/sh
# XFS QA Test No. 071
# $Id: 071,v 1.1 2003/07/07 03:34:36 fsgqa Exp $
#
# Exercise IO at large file offsets (just terabytes for now).
#
#-----------------------------------------------------------------------
# Copyright (c) 2000-2003 Silicon Graphics, Inc.  All Rights Reserved.
# 
# This program is free software; you can redistribute it and/or modify it
# under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
# 
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# 
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write the Free Software Foundation, Inc., 59
# Temple Place - Suite 330, Boston MA 02111-1307, USA.
# 
# Contact information: Silicon Graphics, Inc., 1600 Amphitheatre Pkwy,
# Mountain View, CA  94043, or:
# 
# http://www.sgi.com 
# 
# For further information regarding this notice, see: 
# 
# http://oss.sgi.com/projects/GenInfo/SGIGPLNoticeExplan/
#-----------------------------------------------------------------------
#
# creator
owner=nathans@sgi.com

seq=`basename $0`
echo "QA output created by $seq"
rm -f $seq.full

here=`pwd`
tmp=/tmp/$$
status=1	# failure is the default!

_cleanup()
{
    rm -f $tmp.*
    umount $SCRATCH_DEV 2>/dev/null
}
trap "_cleanup; exit \$status" 0 1 2 3 15

# get standard environment, filters and checks
. ./common.rc
. ./common.filter

write_block()
{
    location=$1
    offset=$2
    bytes=$3
    direct=$4

    [ `$direct` ] && flags=-d

    echo "Writing $bytes bytes at $location (direct=$direct)" | tee -a $seq.full
    xfs_io -c "pwrite $offset 512" $flags $SCRATCH_MNT/$seq

    echo "Saving block map to $seq.full" | tee -a $seq.full
    xfs_bmap -v $SCRATCH_MNT/$seq >>$seq.full

    echo "Reading $bytes bytes at $location (direct=$direct)" | tee -a $seq.full
    xfs_io -c "pread $offset $bytes" $flags $SCRATCH_MNT/$seq
    xfs_io -c "pread -v $offset $bytes" $flags $SCRATCH_MNT/$seq >>$seq.full

    echo | tee -a $seq.full
}

# real QA test starts here
_require_scratch
_scratch_mkfs_xfs | _filter_mkfs 2>$tmp.mkfs
source $tmp.mkfs
echo
_scratch_mount

oneTB=`echo 1024 \* 1024 \* 1024 \* 1024 | bc`

# Step from 1Tb through 16Tb, doing seek/writes/reads on each
# boundary (using holey files), 1byte back from the boundary,
# and 1FSB back from the boundary (and xfs_bmaps all the way).

xfs_io -c "truncate 0" -f $SCRATCH_MNT/$seq

count=1
while [ $count -le 16 ]
do
    # buffered IO
    offset=`echo $oneTB \* $count | bc`
    write_block "$count Tb" $offset 512 false
    offset=`echo $oneTB \* $count \- 1 | bc`
    write_block "$count Tb minus 1 byte" $offset 512 false
    offset=`echo $oneTB \* $count \- $dbsize | bc`
    write_block "$count Tb minus 1 FSB" $offset 512 false

    # direct IO
    offset=`echo $oneTB \* $count | bc`
    write_block "$count Tb" $offset $dbsize true
    offset=`echo $oneTB \* $count \- 1 | bc`
    write_block "$count Tb minus 1 FSB" $offset $dbsize true

    count=`expr $count + 1`
done

# success, all done
status=0
exit
