#! /bin/sh
# XFS QA Test No. 062
# $Id: 1.1 $
#
# Exercises the getfattr/setfattr tools
# Derived from tests originally written by Andreas Gruenbacher for ext2
#
#-----------------------------------------------------------------------
# Copyright (c) 2001 Silicon Graphics, Inc.  All Rights Reserved.
# 
# This program is free software; you can redistribute it and/or modify it
# under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
# 
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# 
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write the Free Software Foundation, Inc., 59
# Temple Place - Suite 330, Boston MA 02111-1307, USA.
# 
# Contact information: Silicon Graphics, Inc., 1600 Amphitheatre Pkwy,
# Mountain View, CA  94043, or:
# 
# http://www.sgi.com 
# 
# For further information regarding this notice, see: 
# 
# http://oss.sgi.com/projects/GenInfo/SGIGPLNoticeExplan/
#-----------------------------------------------------------------------
#
# creator
owner=nathans@sgi.com

seq=`basename $0`
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1	# failure is the default!

# get standard environment, filters and checks
. ./common.rc
. ./common.filter

_cleanup()
{
	echo; echo "*** unmount"
	umount $SCRATCH_MNT 2>/dev/null
	rm -f $tmp.*
}
trap "_cleanup; exit \$status" 0 1 2 3 15

_filter_scratch()
{
	sed -e "s,$SCRATCH_MNT,SCRATCH_MNT,g"
}

getfattr()
{
	/usr/bin/getfattr --absolute-names -dh $@ 2>&1 | _filter_scratch
}

setfattr()
{
	/usr/bin/setfattr $@
}

_create_test_bed()
{
	echo "*** create test bed"
	touch $SCRATCH_MNT/reg
	mkdir -p $SCRATCH_MNT/dir
	ln -s $SCRATCH_MNT/dir $SCRATCH_MNT/lnk
	mkdir $SCRATCH_MNT/dev
	mknod $SCRATCH_MNT/dev/b b 0 0
	mknod $SCRATCH_MNT/dev/c c 0 0
	mknod $SCRATCH_MNT/dev/p p
	# sanity check
	find $SCRATCH_MNT | LC_COLLATE=POSIX sort | _filter_scratch
}

_require_scratch
rm -f $tmp.backup1 $tmp.backup2 $seq.full

# real QA test starts here
mkfs_xfs -f $SCRATCH_DEV | _filter_mkfs 2>$tmp.mkfs
mount -t xfs $SCRATCH_DEV $SCRATCH_MNT || _fail "mount failed"
_create_test_bed

for nsp in user xfsroot; do
	for inode in reg dir lnk dev/b dev/c dev/p; do

		echo; echo "=== TYPE $inode; NAMESPACE $nsp"; echo

		echo "*** set/get one initially empty attribute"
		setfattr -h -n $nsp.name $SCRATCH_MNT/$inode
		getfattr -m $nsp $SCRATCH_MNT/$inode

		echo "*** overwrite empty, set several new attributes"
		setfattr -h -n $nsp.name -v 0xbabe $SCRATCH_MNT/$inode
		setfattr -h -n $nsp.name2 -v 0xdeadbeef $SCRATCH_MNT/$inode
		setfattr -h -n $nsp.name3 -v 0xdeface $SCRATCH_MNT/$inode

		echo "*** fetch several attribute names and values (hex)"
		getfattr -m $nsp -e hex $SCRATCH_MNT/$inode

		echo "*** fetch several attribute names and values (base64)"
		getfattr -m $nsp -e base64 $SCRATCH_MNT/$inode

		echo "*** shrink value of an existing attribute"
		setfattr -h -n $nsp.name2 -v 0xdeaf $SCRATCH_MNT/$inode
		getfattr -m $nsp -e hex $SCRATCH_MNT/$inode

		echo "*** grow value of existing attribute"
		setfattr -h -n $nsp.name2 -v 0xdecade $SCRATCH_MNT/$inode
		getfattr -m $nsp -e hex $SCRATCH_MNT/$inode

		echo "*** set an empty value for second attribute"
		setfattr -h -n $nsp.name2 $SCRATCH_MNT/$inode
		getfattr -m $nsp -n $nsp.name2 $SCRATCH_MNT/$inode

		echo "*** overwrite empty value"
		setfattr -h -n $nsp.name2 -v 0xcafe $SCRATCH_MNT/$inode
		getfattr -m $nsp -e hex -n $nsp.name2 $SCRATCH_MNT/$inode

		echo "*** remove attribute"
		setfattr -h -x $nsp.name2 $SCRATCH_MNT/$inode
		getfattr -m $nsp -e hex -n $nsp.name2 $SCRATCH_MNT/$inode

		echo "*** final list (strings, type=$inode, nsp=$nsp)"
		getfattr -m '^user|^xfsroot' -e hex $SCRATCH_MNT/$inode
	done
done


# 
# Test the directory descent code
# 
echo; echo

_extend_test_bed()
{
	echo "*** extend test bed"
	# must set some descents' attributes to be useful
	mkdir -p $SCRATCH_MNT/here/up/ascend
	mkdir -p $SCRATCH_MNT/descend/down/here
	find $SCRATCH_MNT/descend | xargs setfattr -n user.x -v yz
	find $SCRATCH_MNT/descend | xargs setfattr -n user.1 -v 23
	find $SCRATCH_MNT/here | xargs setfattr -n xfsroot.a -v bc
	find $SCRATCH_MNT/here | xargs setfattr -n xfsroot.9 -v 87
	# whack a symlink in the middle, just to be difficult
	ln -s $SCRATCH_MNT/here/up $SCRATCH_MNT/descend/and
	# dump out our new starting point
	find $SCRATCH_MNT | LC_COLLATE=POSIX sort | _filter_scratch
}

_extend_test_bed

echo
echo "*** directory descent with us following symlinks"
getfattr -h -L -R -m '^user|^xfsroot' -e hex $SCRATCH_MNT

echo
echo "*** directory descent without following symlinks"
getfattr -h -P -R -m '^user|^xfsroot' -e hex $SCRATCH_MNT


# 
# Test the backup/restore code
# 
echo; echo

_backup()
{
	# NB: no filtering of scratch here... (need to restore too)
	/usr/bin/getfattr --absolute-names -dh -R -m '^user|^system' $SCRATCH_MNT >$1
	echo BACKUP $1 >>$seq.full
	cat $1 >> $seq.full
	[ ! -s $1 ] && echo "warning: $1 (backup file) is empty"
}

echo "*** backup everything"
_backup $tmp.backup1

echo "*** clear out the scratch device"
rm -fr $SCRATCH_MNT/*
echo "AFTER REMOVE" >>$seq.full
getfattr -L -R -m '^user|^xfsroot' $SCRATCH_MNT >>$seq.full

echo "*** reset test bed with no extended attributes"
_create_test_bed
_extend_test_bed

echo "*** restore everything"
setfattr -h --restore=$tmp.backup1
_backup $tmp.backup2

echo "AFTER RESTORE" >>$seq.full
getfattr -L -R -m '^user|^xfsroot' $SCRATCH_MNT >>$seq.full

echo "*** compare before and after backups"
diff $tmp.backup1 $tmp.backup2
if [ $? -ne 0 ]; then
	echo "urk, failed - creating $seq.backup1 and $seq.backup2"
	cp $tmp.backup1 $seq.backup1 && cp $tmp.backup2 $seq.backup2
	status=1
	exit
fi

# success, all done
status=0
exit
