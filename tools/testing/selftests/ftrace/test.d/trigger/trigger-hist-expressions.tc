#!/bin/sh
# SPDX-License-Identifier: GPL-2.0
# description: event trigger - test histogram expression parsing
# requires: set_event events/sched/sched_process_fork/trigger events/sched/sched_process_fork/hist error_log


fail() { #msg
    echo $1
    exit_fail
}

get_hist_var() { #var_name hist_path
    hist_output=`grep -m1 "$1: " $2`
    hitcount=`echo $hist_output | awk '{ for (i=1; i<=NF; ++i) { if ($i ~ "hitcount:") print $(i+1)} }'`
    var_sum=`echo $hist_output | awk '{ for (i=1; i<=NF; ++i) { if ($i ~ "'$1':") print $(i+1)} }'`
    var_val=$(( var_sum / hitcount ))
    echo $var_val
}

test_hist_expr() { # test_name expression expected_val
    echo "Test hist trigger expressions - $1"

    echo "hist:keys=common_pid:x=$2" > events/sched/sched_process_fork/trigger
    echo 'hist:keys=common_pid:vals=$x' >> events/sched/sched_process_fork/trigger
    for i in `seq 1 10` ; do ( echo "forked" > /dev/null); done

    actual=`get_hist_var x events/sched/sched_process_fork/hist`

    if [ $actual != $3 ]; then
        fail "Failed hist trigger expression evaluation: Expression: $2 Expected: $3, Actual: $actual"
    fi

    reset_trigger
}

check_error() { # test_name command-with-error-pos-by-^
    echo "Test hist trigger expressions - $1"
    ftrace_errlog_check 'hist:sched:sched_process_fork' "$2" 'events/sched/sched_process_fork/trigger'
    reset_trigger
}

test_hist_expr "Variable assignment" "123" "123"

test_hist_expr "Subtraction not associative" "16-8-4-2" "2"

test_hist_expr "Division not associative" "64/8/4/2" "1"

test_hist_expr "Same precedence operators (+,-) evaluated left to right" "16-8+4+2" "14"

test_hist_expr "Same precedence operators (*,/) evaluated left to right" "4*3/2*2" "12"

test_hist_expr "Multiplication evaluated before addition/subtraction" "4+3*2-2" "8"

test_hist_expr "Division evaluated before addition/subtraction" "4+6/2-2" "5"

# Division by zero returns -1
test_hist_expr "Handles division by zero" "3/0" "-1"

# err pos is where the last detected sub-express was detected
# this can vary depending on how the expression tree generated
check_error "Too many subexpressions" 'hist:keys=common_pid:x=32+^10*3/20-4'
check_error "Too many subexpressions" 'hist:keys=common_pid:x=^1+2+3+4+5'

check_error "Unary minus not supported in subexpression" 'hist:keys=common_pid:x=-(^1)+2'

check_error "'.sym-offset' modifier not supported in subexpression" \
    'hist:keys=common_pid:x=1+common_pid^.sym-offset'
check_error "'.sym-offset' modifier not supported in subexpression" \
    'hist:keys=common_pid:x=common_pid^.sym-offset-2'
check_error "'.sym-offset' modifier not supported in subexpression" \
    'hist:keys=common_pid:x=4/common_pid^.sym-offset*3'

exit 0
