#! /bin/sh
# FS QA Test No. 008
#
# randholes test
#
#-----------------------------------------------------------------------
# Copyright (c) 2000-2002 Silicon Graphics, Inc.  All Rights Reserved.
#-----------------------------------------------------------------------
#
# creator
owner=dxm@sgi.com

seq=`basename $0`
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=0	# success is the default!
pgsize=`$here/src/feature -s`
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
    rm -f $tmp.*
    rm -rf $testdir/randholes.$$.*
    _cleanup_testdir
}

_filter()
{
    sed -e "s/-b $pgsize/-b PGSIZE/g"
}

# get standard environment, filters and checks
. ./common.rc
. ./common.filter

_do_test()
{
    _n="$1"
    _holes="$2"
    _param="$3"

    out=$testdir/randholes.$$.$_n
    echo ""
    echo "randholes.$_n : $_param" | _filter
    echo "------------------------------------------"
    if $here/src/randholes $_param $out >$tmp.out
    then
	# only check if we're not allocating in huge chunks (extsz flag)
	if _test_inode_flag extsize $out || _test_inode_flag realtime $out
	then
		echo "holes is in range"
	else
		# quick check - how many holes did we get?
	        count=`xfs_bmap $out | egrep -c ': hole'`
		# blocks can end up adjacent, therefore number of holes varies
		_within_tolerance "holes" $count $_holes 10% -v
	fi
    else
        echo "    randholes returned $? - see $seq.out.full"
        echo "--------------------------------------"       >>$here/$seq.out.full
        echo "$_n - output from randholes:"                 >>$here/$seq.out.full
        echo "--------------------------------------"       >>$here/$seq.out.full
        cat $tmp.out                                        >>$here/$seq.out.full
        echo "--------------------------------------"       >>$here/$seq.out.full
        echo "$_n - output from bmap:"                      >>$here/$seq.out.full
        echo "--------------------------------------"       >>$here/$seq.out.full
        xfs_bmap -vvv $out                                  >>$here/$seq.out.full
        status=1
    fi
}

# real QA test starts here
_supported_fs xfs
_supported_os IRIX Linux

_setup_testdir

rm -f $here/$seq.out.full

_do_test 1 50 "-l 5000000 -c 50 -b $pgsize"
_do_test 2 100 "-l 10000000 -c 100 -b $pgsize"
_do_test 3 100 "-l 10000000 -c 100 -b 512"   # test partial pages

# rinse, lather, repeat for direct IO
_do_test 4 50 "-d -l 5000000 -c 50 -b $pgsize"
_do_test 5 100 "-d -l 10000000 -c 100 -b $pgsize"
# note: direct IO requires page aligned IO

# todo: realtime.

# success, all done
exit
