/* SPDX-License-Identifier: GPL-2.0+ */
/*
 * Register Map - Based on AN888_SMUforIEEE_SynchEther_82P33xxx_RevH.pdf
 *
 * Copyright (C) 2021 Integrated Device Technology, Inc., a Renesas Company.
 */
#ifndef HAVE_IDT82P33_REG
#define HAVE_IDT82P33_REG

#define SABRE_REG_ADDR(page, offset) (((page) << 0x7) | ((offset) & 0x7f))

/* Register address */
#define SABRE_DPLL1_TOD_CNFG 0x134
#define SABRE_DPLL2_TOD_CNFG 0x1B4

#define SABRE_DPLL1_TOD_STS 0x10B
#define SABRE_DPLL2_TOD_STS 0x18B

#define SABRE_DPLL1_TOD_TRIGGER 0x115
#define SABRE_DPLL2_TOD_TRIGGER 0x195

#define SABRE_DPLL1_OPERATING_MODE_CNFG 0x120
#define SABRE_DPLL2_OPERATING_MODE_CNFG 0x1A0

#define SABRE_DPLL1_HOLDOVER_FREQ_CNFG 0x12C
#define SABRE_DPLL2_HOLDOVER_FREQ_CNFG 0x1AC

#define SABRE_DPLL1_PHASE_OFFSET_CNFG 0x143
#define SABRE_DPLL2_PHASE_OFFSET_CNFG 0x1C3

#define SABRE_DPLL1_SYNC_EDGE_CNFG 0x140
#define SABRE_DPLL2_SYNC_EDGE_CNFG 0x1C0

#define SABRE_DPLL1_INPUT_MODE_CNFG 0x116
#define SABRE_DPLL2_INPUT_MODE_CNFG 0x196

#define SABRE_DPLL1_OPERATING_STS 0x102
#define SABRE_DPLL2_OPERATING_STS 0x182

#define SABRE_DPLL1_CURRENT_FREQ_STS 0x103
#define SABRE_DPLL2_CURRENT_FREQ_STS 0x183

#define SABRE_REG_SOFT_RESET 0X381

#define SABRE_OUT_MUX_CNFG(outn) REG_ADDR(0x6, (0xC * (outn)))

/* Register bit definitions */
#define SABRE_SYNC_TOD BIT(1)
#define SABRE_PH_OFFSET_EN BIT(7)
#define SABRE_SQUELCH_ENABLE BIT(5)

/* Bit definitions for the DPLL_MODE register */
#define SABRE_PLL_MODE_SHIFT		(0)
#define SABRE_PLL_MODE_MASK		(0x1F)
#define SABRE_COMBO_MODE_EN		BIT(5)
#define SABRE_COMBO_MODE_SHIFT	(6)
#define SABRE_COMBO_MODE_MASK		(0x3)

/* Bit definitions for DPLL_OPERATING_STS register */
#define SABRE_OPERATING_STS_MASK	(0x7)
#define SABRE_OPERATING_STS_SHIFT	(0x0)

/* Bit definitions for DPLL_TOD_TRIGGER register */
#define SABRE_READ_TRIGGER_MASK	(0xF)
#define SABRE_READ_TRIGGER_SHIFT	(0x0)
#define SABRE_WRITE_TRIGGER_MASK	(0xF0)
#define SABRE_WRITE_TRIGGER_SHIFT	(0x4)

/* Bit definitions for REG_SOFT_RESET register */
#define SABRE_SOFT_RESET_EN		BIT(7)

enum sabre_pll_mode {
	SABRE_PLL_MODE_MIN = 0,
	SABRE_PLL_MODE_AUTOMATIC = SABRE_PLL_MODE_MIN,
	SABRE_PLL_MODE_FORCE_FREERUN = 1,
	SABRE_PLL_MODE_FORCE_HOLDOVER = 2,
	SABRE_PLL_MODE_FORCE_LOCKED = 4,
	SABRE_PLL_MODE_FORCE_PRE_LOCKED2 = 5,
	SABRE_PLL_MODE_FORCE_PRE_LOCKED = 6,
	SABRE_PLL_MODE_FORCE_LOST_PHASE = 7,
	SABRE_PLL_MODE_DCO = 10,
	SABRE_PLL_MODE_WPH = 18,
	SABRE_PLL_MODE_MAX = SABRE_PLL_MODE_WPH,
};

enum sabre_hw_tod_trig_sel {
	SABRE_HW_TOD_TRIG_SEL_MIN = 0,
	SABRE_HW_TOD_TRIG_SEL_NO_WRITE = SABRE_HW_TOD_TRIG_SEL_MIN,
	SABRE_HW_TOD_TRIG_SEL_NO_READ = SABRE_HW_TOD_TRIG_SEL_MIN,
	SABRE_HW_TOD_TRIG_SEL_SYNC_SEL = 1,
	SABRE_HW_TOD_TRIG_SEL_IN12 = 2,
	SABRE_HW_TOD_TRIG_SEL_IN13 = 3,
	SABRE_HW_TOD_TRIG_SEL_IN14 = 4,
	SABRE_HW_TOD_TRIG_SEL_TOD_PPS = 5,
	SABRE_HW_TOD_TRIG_SEL_TIMER_INTERVAL = 6,
	SABRE_HW_TOD_TRIG_SEL_MSB_PHASE_OFFSET_CNFG = 7,
	SABRE_HW_TOD_TRIG_SEL_MSB_HOLDOVER_FREQ_CNFG = 8,
	SABRE_HW_TOD_WR_TRIG_SEL_MSB_TOD_CNFG = 9,
	SABRE_HW_TOD_RD_TRIG_SEL_LSB_TOD_STS = SABRE_HW_TOD_WR_TRIG_SEL_MSB_TOD_CNFG,
	SABRE_WR_TRIG_SEL_MAX = SABRE_HW_TOD_WR_TRIG_SEL_MSB_TOD_CNFG,
};

/** @brief Enumerated type listing DPLL operational modes */
enum sabre_dpll_state {
	SABRE_DPLL_STATE_FREERUN = 1,
	SABRE_DPLL_STATE_HOLDOVER = 2,
	SABRE_DPLL_STATE_LOCKED = 4,
	SABRE_DPLL_STATE_PRELOCKED2 = 5,
	SABRE_DPLL_STATE_PRELOCKED = 6,
	SABRE_DPLL_STATE_LOSTPHASE = 7,
	SABRE_DPLL_STATE_MAX
};

#endif
