#! /bin/bash
# FS QA Test No. 171
#
# Reflink a file, use up the rest of the space, then try to observe ENOSPC
# while copy-on-writing the file via the page cache.
#
#-----------------------------------------------------------------------
# Copyright (c) 2015, Oracle and/or its affiliates.  All Rights Reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#-----------------------------------------------------------------------

seq=`basename "$0"`
seqres="$RESULT_DIR/$seq"
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1    # failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
    cd /
    rm -rf "$tmp".* "$TESTDIR1"
}

# get standard environment, filters and checks
. ./common/rc
. ./common/filter
. ./common/attr
. ./common/reflink

# real QA test starts here
_supported_os Linux
_require_scratch_reflink
_require_cp_reflink

rm -f "$seqres.full"

echo "Format and mount"
_scratch_mkfs > "$seqres.full" 2>&1
_scratch_mount >> "$seqres.full" 2>&1

TESTDIR="$SCRATCH_MNT/test-$seq"
rm -rf "$TESTDIR"
mkdir "$TESTDIR"

echo "Reformat with appropriate size"
BLKSZ="$(stat -f "$TESTDIR" -c '%S')"
NR_BLKS=10240
umount "$SCRATCH_MNT"
SZ_BYTES=$((NR_BLKS * 8 * BLKSZ))
if [ $SZ_BYTES -lt $((32 * 1048576)) ]; then
	SZ_BYTES=$((32 * 1048576))
fi
_scratch_mkfs_sized $SZ_BYTES >> "$seqres.full" 2>&1
_scratch_mount >> "$seqres.full" 2>&1
rm -rf "$TESTDIR"
mkdir "$TESTDIR"

echo "Create a big file and reflink it"
_pwrite_byte 0x61 0 $((BLKSZ * NR_BLKS)) "$TESTDIR/bigfile" >> "$seqres.full" 2>&1
_cp_reflink "$TESTDIR/bigfile" "$TESTDIR/clonefile"
sync

echo "Allocate the rest of the space"
NR_FREE="$(stat -f -c '%f' "$TESTDIR")"
touch "$TESTDIR/file0" "$TESTDIR/file1"
_pwrite_byte 0x61 0 $((BLKSZ * NR_FREE)) "$TESTDIR/eat_my_space" >> "$seqres.full" 2>&1
sync

echo "CoW the big file"
out="$(_pwrite_byte 0x62 0 $((BLKSZ * NR_BLKS)) "$TESTDIR/bigfile" 2>&1)"
echo "${out}" | grep -q "No space left on device" || echo "CoW should have failed with ENOSPC"
echo "${out}" >> "$seqres.full" 2>&1
echo "${out}"

echo "Remount and try CoW again"
_scratch_remount

out="$(_pwrite_byte 0x62 0 $((BLKSZ * NR_BLKS)) "$TESTDIR/bigfile" 2>&1)"
echo "${out}" | grep -q "No space left on device" || echo "CoW should have failed with ENOSPC"
echo "${out}" >> "$seqres.full" 2>&1
echo "${out}"

#filefrag -v $TESTDIR/bigfile
#filefrag -v $TESTDIR/clonefile

echo "Check scratch fs"
umount "$SCRATCH_MNT"
_check_scratch_fs

# success, all done
status=0
exit
