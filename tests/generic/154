#! /bin/bash
# FS QA Test No. 154
#
# Ensure that CoW on all copies of a file reflinked N times increases block count
#   - Record fs block usage (0)
#   - Create a file and some reflink copies
#   - Record fs block usage (1)
#   - CoW some blocks of the copies
#   - Record fs block usage (2)
#   - CoW all the rest of the blocks of the copies
#   - Compare fs block usage to (2), (1), and (0)
#
#-----------------------------------------------------------------------
# Copyright (c) 2015, Oracle and/or its affiliates.  All Rights Reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#-----------------------------------------------------------------------

seq=`basename $0`
seqres="$RESULT_DIR/$seq"
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1    # failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
    cd /
    rm -rf "$tmp".* "$TESTDIR"
}

# get standard environment, filters and checks
. ./common/rc
. ./common/filter
. ./common/reflink

# real QA test starts here
_supported_os Linux
_require_test_reflink
_require_cp_reflink

rm -f "$seqres.full"

TESTDIR="$TEST_DIR/test-$seq"
rm -rf "$TESTDIR"
mkdir "$TESTDIR"

echo "Create the original file blocks"
BLKSZ="$(stat -f "$TESTDIR" -c '%S')"
BLKS=2000
MARGIN=100
FREE_BLOCKS0=$(stat -f "$TESTDIR" -c '%f')
NR=4
SZ=$((BLKS * BLKSZ))
_pwrite_byte 0x61 0 $SZ "$TESTDIR/file1" >> "$seqres.full"
_test_remount

echo "Create the reflink copies"
for i in `seq 2 $NR`; do
	_cp_reflink "$TESTDIR/file1" "$TESTDIR/file$i"
done
_test_remount
FREE_BLOCKS1=$(stat -f "$TESTDIR" -c '%f')

echo "Rewrite some of the blocks"
_pwrite_byte 0x62 0 $SZ "$TESTDIR/file2" >> "$seqres.full"
_pwrite_byte 0x63 0 $((SZ / 2)) "$TESTDIR/file3" >> "$seqres.full"
_pwrite_byte 0x64 $((SZ / 2)) $((SZ / 2)) "$TESTDIR/file4" >> "$seqres.full"
_test_remount
FREE_BLOCKS2=$(stat -f "$TESTDIR" -c '%f')

echo "Rewrite all the files"
_pwrite_byte 0x62 0 $SZ "$TESTDIR/file2" >> "$seqres.full"
_pwrite_byte 0x63 0 $SZ "$TESTDIR/file3" >> "$seqres.full"
_pwrite_byte 0x64 0 $SZ "$TESTDIR/file4" >> "$seqres.full"
_test_remount
FREE_BLOCKS3=$(stat -f "$TESTDIR" -c '%f')

echo "Rewrite the original file"
_pwrite_byte 0x65 0 $SZ "$TESTDIR/file1" >> "$seqres.full"
_test_remount
FREE_BLOCKS4=$(stat -f "$TESTDIR" -c '%f')
#echo $FREE_BLOCKS0 $FREE_BLOCKS1 $FREE_BLOCKS2 $FREE_BLOCKS3 $FREE_BLOCKS4

_within_tolerance "free blocks after reflinking" $FREE_BLOCKS1 $((FREE_BLOCKS0 - BLKS)) $MARGIN -v

_within_tolerance "free blocks after partially CoWing some copies" $FREE_BLOCKS2 $((FREE_BLOCKS1 - (2 * BLKS))) $MARGIN -v

_within_tolerance "free blocks after CoWing all copies" $FREE_BLOCKS3 $((FREE_BLOCKS2 - BLKS)) $MARGIN -v

_within_tolerance "free blocks after overwriting original" $FREE_BLOCKS4 $FREE_BLOCKS3 $MARGIN -v

_within_tolerance "free blocks after all tests" $FREE_BLOCKS4 $((FREE_BLOCKS0 - (4 * BLKS))) $MARGIN -v

# success, all done
status=0
exit
