#! /bin/bash
# FS QA Test No. 194
#
# Ensuring that copy on write in direct-io mode works when the CoW
# range originally covers multiple extents, some delalloc, some not.
#   - Create a file.
#   - Reflink the odd blocks of the first file into the second file.
#   - Buffered write the even blocks of the second file.
#   - directio CoW across the halfway mark, starting with the unwritten extent.
#   - Check that the files are now different where we say they're different.
#
#-----------------------------------------------------------------------
# Copyright (c) 2015, Oracle and/or its affiliates.  All Rights Reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#-----------------------------------------------------------------------

seq=`basename "$0"`
seqres="$RESULT_DIR/$seq"
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1    # failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
    cd /
    rm -rf "$tmp".* "$TESTDIR"
}

# get standard environment, filters and checks
. ./common/rc
. ./common/filter
. ./common/reflink

# real QA test starts here
_supported_os Linux
_require_scratch_reflink
_require_xfs_io_command "falloc"

rm -f "$seqres.full"

echo "Format and mount"
_scratch_mkfs > "$seqres.full" 2>&1
_scratch_mount >> "$seqres.full" 2>&1

TESTDIR="$SCRATCH_MNT/test-$seq"
rm -rf $TESTDIR
mkdir $TESTDIR

echo "Create the original files"
BLKSZ=65536
NR=64
_pwrite_byte 0x61 0 $((BLKSZ * NR)) "$TESTDIR/file1" >> "$seqres.full"
$XFS_IO_PROG -f -c "truncate $((BLKSZ * NR))" "$TESTDIR/file3" >> "$seqres.full"
_pwrite_byte 0x00 0 $((BLKSZ * NR)) "$TESTDIR/file3.chk" >> "$seqres.full"
seq 0 2 $((NR-1)) | while read f; do
	_reflink_range "$TESTDIR/file1" $((BLKSZ * f)) "$TESTDIR/file3" $((BLKSZ * f)) $BLKSZ >> "$seqres.full"
	_pwrite_byte 0x61 $((BLKSZ * f)) $BLKSZ "$TESTDIR/file3.chk" >> "$seqres.full"
done
_scratch_remount

echo "Compare files"
md5sum "$TESTDIR/file1" | _filter_scratch
md5sum "$TESTDIR/file3" | _filter_scratch
md5sum "$TESTDIR/file3.chk" | _filter_scratch

echo "directio CoW across the transition"
seq 1 2 $NR | while read f; do
	_pwrite_byte 0x62 $((BLKSZ * f)) $BLKSZ "$TESTDIR/file3" >> "$seqres.full"
	_pwrite_byte 0x62 $((BLKSZ * f)) $BLKSZ "$TESTDIR/file3.chk" >> "$seqres.full"
done
"$XFS_IO_PROG" -d -f -c "pwrite -S 0x63 -b $((BLKSZ * NR / 2)) $((BLKSZ * NR / 4)) $((BLKSZ * NR / 2))" "$TESTDIR/file3" >> "$seqres.full"
_pwrite_byte 0x63 $((BLKSZ * NR / 4)) $((BLKSZ * NR / 2)) "$TESTDIR/file3.chk" >> "$seqres.full"
_scratch_remount

echo "Compare files"
md5sum "$TESTDIR/file1" | _filter_scratch
md5sum "$TESTDIR/file3" | _filter_scratch
md5sum "$TESTDIR/file3.chk" | _filter_scratch

echo "Check for damage"
umount "$SCRATCH_MNT"
_check_scratch_fs

# success, all done
status=0
exit
