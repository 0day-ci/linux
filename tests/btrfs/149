#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2017 SUSE Linux Products GmbH. All Rights Reserved.
#
# FS QA Test No. btrfs/149
#
# Test that an incremental send/receive operation will not fail when the
# destination filesystem has compression enabled and the source filesystem
# has a 4K extent at a file offset 0 that is not compressed and that is
# shared.
#
seq=`basename $0`
seqres=$RESULT_DIR/$seq
echo "QA output created by $seq"

tmp=/tmp/$$
status=1	# failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
	cd /
	rm -fr $send_files_dir
	rm -f $tmp.*
}

# get standard environment, filters and checks
. ./common/rc
. ./common/filter
. ./common/reflink

# real QA test starts here
_supported_fs btrfs
_supported_os Linux
_require_test
_require_scratch
_require_scratch_reflink
_require_odirect

send_files_dir=$TEST_DIR/btrfs-test-$seq

rm -f $seqres.full
rm -fr $send_files_dir
mkdir $send_files_dir

_scratch_mkfs >>$seqres.full 2>&1
_scratch_mount "-o compress"

# Write to our file using direct IO, so that this way the write ends up not
# getting compressed, that is, we get a regular extent which is neither
# inlined nor compressed.
# Alternatively, we could have mounted the fs without compression enabled,
# which would result as well in an uncompressed regular extent.
$XFS_IO_PROG -f -d -c "pwrite -S 0xab 0 4K" $SCRATCH_MNT/foobar | _filter_xfs_io

$BTRFS_UTIL_PROG subvolume snapshot -r $SCRATCH_MNT \
	$SCRATCH_MNT/mysnap1 > /dev/null

# Clone the regular (not inlined) extent.
$XFS_IO_PROG -c "reflink $SCRATCH_MNT/foobar 0 8K 4K" $SCRATCH_MNT/foobar \
	| _filter_xfs_io

$BTRFS_UTIL_PROG subvolume snapshot -r $SCRATCH_MNT \
	$SCRATCH_MNT/mysnap2 > /dev/null

$BTRFS_UTIL_PROG send -f $send_files_dir/1.snap \
		 $SCRATCH_MNT/mysnap1 2>&1 >/dev/null | _filter_scratch

# Now do an incremental send of the second snapshot. The send stream can have
# a clone operation to clone the extent at offset 0 to offset 8K. This operation
# would fail on the receiver if it has compression enabled, since the write
# operation of the extent at offset 0 was compressed because it was a buffered
# write operation, and btrfs' clone implementation does not allow cloning inline
# extents to offsets different from 0.
$BTRFS_UTIL_PROG send -p $SCRATCH_MNT/mysnap1 -f $send_files_dir/2.snap \
		 $SCRATCH_MNT/mysnap2 2>&1 >/dev/null | _filter_scratch

echo "File digests in the original filesystem:"
md5sum $SCRATCH_MNT/mysnap1/foobar | _filter_scratch
md5sum $SCRATCH_MNT/mysnap2/foobar | _filter_scratch

# Now recreate the filesystem by receiving both send streams and verify we get
# the same file content that the original filesystem had.
_scratch_unmount
_scratch_mkfs >>$seqres.full 2>&1
_scratch_mount "-o compress"

$BTRFS_UTIL_PROG receive -f $send_files_dir/1.snap $SCRATCH_MNT > /dev/null
$BTRFS_UTIL_PROG receive -f $send_files_dir/2.snap $SCRATCH_MNT > /dev/null

echo "File digests in the new filesystem:"
md5sum $SCRATCH_MNT/mysnap1/foobar | _filter_scratch
md5sum $SCRATCH_MNT/mysnap2/foobar | _filter_scratch

status=0
exit
