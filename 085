#! /bin/sh
# FS QA Test No. 085
#
# To test log replay by shutdown of file system
# This is the first simple initial test to ensure that
# the goingdown ioctl is working and recovery of
# create transactions is working.
#
#-----------------------------------------------------------------------
# Copyright (c) 2000-2003 Silicon Graphics, Inc.  All Rights Reserved.
# 
# This program is free software; you can redistribute it and/or modify it
# under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
# 
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# 
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write the Free Software Foundation, Inc., 59
# Temple Place - Suite 330, Boston MA 02111-1307, USA.
# 
# Contact information: Silicon Graphics, Inc., 1600 Amphitheatre Pkwy,
# Mountain View, CA  94043, or:
# 
# http://www.sgi.com 
# 
# For further information regarding this notice, see: 
# 
# http://oss.sgi.com/projects/GenInfo/SGIGPLNoticeExplan/
#-----------------------------------------------------------------------
#
# creator
owner=tes@melbourne.sgi.com

seq=`basename $0`
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1	# failure is the default!
trap "rm -f $tmp.*; exit \$status" 0 1 2 3 15

# get standard environment, filters and checks
. ./common.rc
. ./common.filter

# put operating system in $os
_get_os

# real QA test starts here
_supported_fs xfs
_supported_os IRIX Linux

_do_logprint()
{
    xfs_logprint -t $SCRATCH_DEV | tee -a $seq.full >$tmp.logprint
    if grep -q "<DIRTY>" $tmp.logprint; then
	echo "dirty log"
    fi
    if grep -q "<CLEAN>" $tmp.logprint; then
	echo "clean log"
    fi
}

rm -f $seq.full
rm -f $tmp.log


if [ $os == 'irix' ]; then
    tail -f /var/adm/SYSLOG >$tmp.log &
elif [ $os == 'linux' ]; then
    tail -f /var/log/messages >$tmp.log &
else
    echo Error test $seq does not run on the operating system: `uname`
    exit
fi

pid=$!
cp $tmp.log $tmp.log.orig # note the original log

_require_scratch

echo "mkfs"
_scratch_mkfs_xfs >>$seq.full 2>&1 \
    || _fail "mkfs scratch failed"

echo "mount"
_scratch_mount >>$seq.full 2>&1 \
    || _fail "mount failed: $MOUNT_OPTIONS"

echo "touch files"
touch $SCRATCH_MNT/{0,1,2,3,4,5,6,7,8,9}{0,1,2,3,4,5,6,7,8,9}

echo "godown"
src/godown -v -f $SCRATCH_MNT >> $seq.full

echo "unmount"
umount $SCRATCH_MNT

echo "logprint after going down..."
_do_logprint

# curious if FS consistent at start
if false; then
    if /usr/sbin/xfs_check $SCRATCH_DEV; then
       echo "*** checked ok ***"
    fi
fi

echo "mount with replay"
_scratch_mount $mnt >>$seq.full 2>&1 \
    || _fail "mount failed: $mnt $MOUNT_OPTIONS"

echo "ls SCRATCH_MNT"
ls $SCRATCH_MNT

echo "unmount"
umount $SCRATCH_MNT

echo "logprint after mount and replay..."
_do_logprint

if _check_scratch_fs; then
    echo "filesystem is checked ok"
else
    echo "filesystem is NOT ok"
fi

# success, all done
status=0
exit
