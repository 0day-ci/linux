# SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause)
%YAML 1.2
---
$id: http://devicetree.org/schemas/net/mctp-i2c.yaml#
$schema: http://devicetree.org/meta-schemas/core.yaml#

title: MCTP I2C transport binding

maintainers:
  - Matt Johnston <matt@codeconstruct.com.au>

description:
  The MCTP I2C binding defines an MCTP endpoint on the I2C bus to
  communicate with I2C peripherals using MCTP (DMTF specification DSP0237).
  A single binding node can attach to multiple child busses in a mux topology.
  An mctp-i2c node's parent must be a hardware bus adapter which supports
  slave functionality. The reg address must include I2C_OWN_SLAVE_ADDRESS.

properties:
  compatible:
    const: mctp-i2c

  reg:
    maxItems: 1

  bus-attach:
    $ref: "/schemas/types.yaml#/definitions/phandle-array"
    description: |
      List of phandles of I2C busses to attach to. I2C mux busses may only
      be attached to an mctp-i2c binding on their parent root adapter in the
      mux topology.
      If no bus-attach property is specified then only the direct parent
      I2C bus is attached. Otherwise to include a direct parent bus it
      must be included in the bus-attach list if needed.


additionalProperties: true

required:
  - compatible
  - reg

examples:
  - |
    #include <dt-bindings/i2c/i2c.h>

    // simple attaching to a root adapter i2c0
    i2c0: i2cbus0 {
        #address-cells = <1>;
        #size-cells = <0>;

        mctp@50 {
            compatible = "mctp-i2c";
            reg = <(0x50 | I2C_OWN_SLAVE_ADDRESS)>;
        };
    };

    // attaching to a root adapter i2c5 and a child mux bus i2c14
    i2c5: i2cbus5 {
        #address-cells = <1>;
        #size-cells = <0>;

        mctp@50 {
            compatible = "mctp-i2c";
            reg = <(0x50 | I2C_OWN_SLAVE_ADDRESS)>;
            attach-bus = <&i2c5 &i2c14>;
        };
    };

    i2cmux0 {
      compatible = "i2c-mux-gpio";
      #address-cells = <1>;
      #size-cells = <0>;
      i2c-parent = <&i2c0>;
      i2c14: i2c@5 {
        reg = <0>;
      };
    };
