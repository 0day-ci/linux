# SPDX-License-Identifier: (GPL-2.0-only or BSD-2-Clause)
%YAML 1.2
---
$id: http://devicetree.org/schemas/power/reset/gpio-poweroff.yaml#
$schema: http://devicetree.org/meta-schemas/core.yaml#

title: Driver a GPIO line that can be used to turn the power off

maintainers:
  - Sebastian Reichel <sre@kernel.org>

description:
  The driver supports both level triggered and edge triggered power off.
  At driver load time, the driver will request the given gpio line and
  install a handler to power off the system. If the optional properties
  'input' is not found, the GPIO line will be driven in the inactive
  state. Otherwise its configured as an input.

  When the power-off handler is called, the gpio is configured as an
  output, and drive active, so triggering a level triggered power off
  condition. This will also cause an inactive->active edge condition, so
  triggering positive edge triggered power off. After a delay of 100ms,
  the GPIO is set to inactive, thus causing an active->inactive edge,
  triggering negative edge triggered power off. After another 100ms
  delay the GPIO is driver active again. If the power is still on and
  the CPU still running after a 3000ms delay, a WARN_ON(1) is emitted.

properties:
  compatible:
    const: gpio-poweroff

  gpios: true

  input:
    description: |
      Initially configure the GPIO line as an input. Only reconfigure
      it to an output when the power-off handler is called. If this optional
      property is not specified, the GPIO is initialized as an output in its inactive state.

  active-delay-ms:
    default: 100
    description: Delay to wait after driving gpio active

  inactive-delay-ms:
    default: 100
    description: Delay to wait after driving gpio inactive

  timeout-ms:
    default: 3000
    description: Time to wait before asserting a WARN_ON(1).

required:
  - compatible
  - gpios

additionalProperties: false

examples:
  - |
    gpio-poweroff {
        compatible = "gpio-poweroff";
        gpios = <&gpio 4 0>;
        timeout-ms = <3000>;
    };
